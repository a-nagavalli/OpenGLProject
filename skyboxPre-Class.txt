#include <glad/glad.h>
#include <include/GLFW/glfw3.h>
#include <iostream>
#include <string>
#include <vector>
#include <glm/glm/glm.hpp>
#include <glm/glm/gtc/type_ptr.hpp>
#include <cmath>

#include "ShaderProgram.h"
#include "model.h"
#include "Object.h"


#include "Skybox.h"


/* 
	TO - DO: 
			 model loading
			 lighting
	maybe:
			 camera class
			 error catching w/ GLAD (GLAD debugging)
			 could make Object inherit Model

	solution to model stuff:
			Make Model's constructor a default constructor that does nothing
			Then, make a new function Model.load() that loads the model
			in that function, if there isn't a valid path, print an error message etc

			Then, you can make Object have a Model object in it
*/
const int WINDOW_WIDTH = 800;
const int WINDOW_HEIGHT = 600;

const float MOVEMENT_SPEED = 7.0f;

const float GROUND_Y = 1.6f;
const float PLAYER_HEIGHT = 1.4f;

void framebuffer_size_callback(GLFWwindow* window, int width, int height);
void mouse_callback(GLFWwindow* window, double xpos, double ypos);
void processInput(GLFWwindow* window);

// camera information
/*
	If you want to change the camera's initial orientation, the cameraFront direction and the
	yaw must align to make it smooth on startup (both pointing in the z-direction is a good choice:

	glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, 1.0f);
	float yaw = 90.0f;
*/
glm::vec3 cameraPos = glm::vec3(0.0f, GROUND_Y + PLAYER_HEIGHT, 0.0f);
glm::vec3 cameraFront = glm::vec3(0.0f, 0.0f, 1.0f);
glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
float yaw = 90.0f;
float pitch = 0.0f;

/*
float yaw = -90.0f;
float pitch = 0.0f;
*/


// used for determining mouse movement offsets (for the camera)
float lastX = WINDOW_WIDTH / 2.0;
float lastY = WINDOW_HEIGHT / 2.0;

bool firstMouse = true;

// used for calculating movement speed
float deltaTime = 0.0f;	
float lastFrame = 0.0f;



int main()
{
	glfwInit();
	glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 3);
	glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 3);
	glfwWindowHint(GLFW_OPENGL_PROFILE, GLFW_OPENGL_CORE_PROFILE);

	GLFWwindow* window = glfwCreateWindow(WINDOW_WIDTH, WINDOW_HEIGHT, "OpenGLProject", NULL, NULL);
	if (window == NULL) {
		std::cout << "Failed to create GLFW window" << std::endl;
		glfwTerminate();
		return -1;
	}
	glfwMakeContextCurrent(window);
	glfwSetInputMode(window, GLFW_CURSOR, GLFW_CURSOR_DISABLED);

	// set callback functions
	glfwSetFramebufferSizeCallback(window, framebuffer_size_callback);
	glfwSetCursorPosCallback(window, mouse_callback);

	// must initialize GLAD before using gl functions
	if (!gladLoadGLLoader((GLADloadproc)glfwGetProcAddress)) {
		std::cout << "Failed to initialize GLAD" << std::endl;
		return -1;
	}

	glViewport(0, 0, WINDOW_WIDTH, WINDOW_HEIGHT);

	// enable depth testing
	glEnable(GL_DEPTH_TEST);

	// create model shader program
	ShaderFile vertexShaderFile("VertexShader.vert", "vertex");
	ShaderFile fragmentShaderFile("FragmentShader.frag", "fragment");
	ShaderProgram shaderProgram(vertexShaderFile, fragmentShaderFile);

	// create skybox shader program
	vertexShaderFile = ShaderFile("SkyboxVertexShader.vert", "vertex");
	fragmentShaderFile = ShaderFile("SkyboxFragmentShader.frag", "fragment");
	ShaderProgram skyboxShaderProgram(vertexShaderFile, fragmentShaderFile);

	// set textures to load in the correct orientation
	// NOTE: some textures may still be upside-down; if you're seeing black where there should be a texture, try flipping the texture image itself upside-down
	// stbi_set_flip_vertically_on_load(true);




	Skybox skybox("bmp", "Skybox Textures", skyboxShaderProgram);







	//float skyboxVertices[] = {
	//	// positions          
	//	-1.0f,  1.0f, -1.0f,
	//	-1.0f, -1.0f, -1.0f,
	//	 1.0f, -1.0f, -1.0f,
	//	 1.0f, -1.0f, -1.0f,
	//	 1.0f,  1.0f, -1.0f,
	//	-1.0f,  1.0f, -1.0f,

	//	-1.0f, -1.0f,  1.0f,
	//	-1.0f, -1.0f, -1.0f,
	//	-1.0f,  1.0f, -1.0f,
	//	-1.0f,  1.0f, -1.0f,
	//	-1.0f,  1.0f,  1.0f,
	//	-1.0f, -1.0f,  1.0f,

	//	 1.0f, -1.0f, -1.0f,
	//	 1.0f, -1.0f,  1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	 1.0f,  1.0f, -1.0f,
	//	 1.0f, -1.0f, -1.0f,

	//	-1.0f, -1.0f,  1.0f,
	//	-1.0f,  1.0f,  1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	 1.0f, -1.0f,  1.0f,
	//	-1.0f, -1.0f,  1.0f,

	//	-1.0f,  1.0f, -1.0f,
	//	 1.0f,  1.0f, -1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	 1.0f,  1.0f,  1.0f,
	//	-1.0f,  1.0f,  1.0f,
	//	-1.0f,  1.0f, -1.0f,

	//	-1.0f, -1.0f, -1.0f,
	//	-1.0f, -1.0f,  1.0f,
	//	 1.0f, -1.0f, -1.0f,
	//	 1.0f, -1.0f, -1.0f,
	//	-1.0f, -1.0f,  1.0f,
	//	 1.0f, -1.0f,  1.0f
	//};
	//unsigned int VAO, VBO;
	//glGenVertexArrays(1, &VAO);
	//glGenBuffers(1, &VBO);

	//glBindVertexArray(VAO);
	//glBindBuffer(GL_ARRAY_BUFFER, VBO);
	//// POF: buffer data not done correctly	(not sizeof(skyboxVertices) ?)
	//glBufferData(GL_ARRAY_BUFFER, sizeof(skyboxVertices), skyboxVertices, GL_STATIC_DRAW);

	//// position data	(layout = 0)
	//glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, sizeof(float) * 3, (void*)0);	// POF: vertex attrib not set correctly (wrong stride?)	
	//glEnableVertexAttribArray(0);

	//// ***** NEED TO FILL TEHSE VECTORS AND THIS STRING
	//std::vector<std::string> texturePaths = {
	//	"clouds1_east.bmp",
	//	"clouds1_west.bmp",
	//	"clouds1_up.bmp",
	//	"clouds1_down.bmp",
	//	"clouds1_north.bmp",
	//	"clouds1_south.bmp"
	//};
	//std::string skyboxDirectory = "Skybox Textures";

	//// first bind the cubemap texture. Then, bind each of the 6 face textures
	//unsigned int textureSkybox;
	//glGenTextures(1, &textureSkybox);
	//glBindTexture(GL_TEXTURE_CUBE_MAP, textureSkybox);

	//for (int i = 0; i < texturePaths.size(); ++i) {
	//	
	//	// POF: same texture being bound each time through loop?
	//	unsigned int texture;
	//	glGenTextures(1, &texture);
	//	glBindTexture(GL_TEXTURE_2D, texture);

	//	int width, height, nrChannels;
	//	unsigned char* data = stbi_load((skyboxDirectory + '/' + texturePaths[i]).c_str(), &width, &height, &nrChannels, 0);
	//	
	//	GLenum format;
	//	if (nrChannels == 3)
	//		format = GL_RGB;
	//	else if (nrChannels == 4)
	//		format = GL_RGBA;

	//	// POF: GL_TEXTURE_CUBE_MAP_POSITIVE_X + i
	//	if (data) {
	//		// POF: nrChannels
	//		glTexImage2D(GL_TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, GL_RGB, width, height, 0, format, GL_UNSIGNED_BYTE, data);		// texture image has RGBA, but we only read in RGB values
	//		glGenerateMipmap(GL_TEXTURE_2D);
	//	}
	//	else
	//		std::cout << "ERROR: SKYBOX: stbi_load failed to load texture" << std::endl;

	//	stbi_image_free(data);
	//}
	//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
	//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
	//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);
	//glTexParameteri(GL_TEXTURE_CUBE_MAP, GL_TEXTURE_WRAP_R, GL_CLAMP_TO_EDGE);

	//skyboxShaderProgram.use();
	//int loc = glGetUniformLocation(skyboxShaderProgram.ID, "skyboxTextures");
	//if (loc < 0)
	//	std::cout << "ERROR: Skybox: couldn't get skyboxTextures uniform location" << std::endl;
	//glUniform1i(loc, 0);		// skybox texture will be at texture unit 0
	
	






	Object house("Textured Models/House/House.obj");
	Object grass("Textured Models/grassground/grassground.obj");
	
	grass.Translate(0.0f, GROUND_Y, 0.0f);
	grass.Scale(10.0f, 1.0f, 10.0f);

	house.Translate(2.0f, 0.0f, 3.0f);

	while (!glfwWindowShouldClose(window)) {

		processInput(window);

		float currentFrame = glfwGetTime();
		deltaTime = currentFrame - lastFrame;
		lastFrame = currentFrame;


		//53, 205, 219
		glClearColor(0.20784f, 0.80392f, 0.85882f, 1.0f);
		glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);

		shaderProgram.use();

		//glm::mat4 model = glm::mat4(1.0f);
		//model = glm::rotate(model, glm::radians(-55.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		//shaderProgram.setUniformMatrix("model", model);

		glm::mat4 view = glm::mat4(1.0f);
		view = glm::lookAt(cameraPos, cameraPos + cameraFront, glm::vec3(0.0f, 1.0f, 0.0f));
		shaderProgram.setUniformMatrix("view", view);

		glm::mat4 projection = glm::mat4(1.0f);
		projection = glm::perspective(glm::radians(45.0f), float(1.0 * WINDOW_WIDTH / WINDOW_HEIGHT), 0.1f, 100.0f);
		shaderProgram.setUniformMatrix("projection", projection);

		shaderProgram.use();		// ***MAYBE unnecessary

		house.Draw(shaderProgram);
		grass.Draw(shaderProgram);

		skybox.Draw(view, projection);

		//// *****WHEN DRAWING
		//glDepthFunc(GL_LEQUAL);		// depth buffer will be filled with values of 1.0, so set to <= to make sure the skybox's fragments pass the depth test
		//skyboxShaderProgram.use();
		//glm::mat4 skyboxViewMat = glm::mat4(glm::mat3(view));
		//skyboxShaderProgram.setUniformMatrix("view", skyboxViewMat);
		//skyboxShaderProgram.setUniformMatrix("projection", projection);
		//glActiveTexture(GL_TEXTURE0);	
		//glBindTexture(GL_TEXTURE_CUBE_MAP, textureSkybox);
		//glBindVertexArray(VAO);
		//glDrawArrays(GL_TRIANGLES, 0, 36);
		//glDepthFunc(GL_LESS);		// set it back to just < for the depth test


		glfwSwapBuffers(window);
		glfwPollEvents();
	}

	glfwTerminate();
	return 0;
}

void framebuffer_size_callback(GLFWwindow* window, int width, int height)	// called every time window is resized
{
	glViewport(0, 0, width, height);
}

void processInput(GLFWwindow* window)
{
	if (glfwGetKey(window, GLFW_KEY_ESCAPE) == GLFW_PRESS)
		glfwSetWindowShouldClose(window, true);

	float cameraSpeed = MOVEMENT_SPEED * deltaTime;
	glm::vec3 cameraRight = glm::normalize(glm::cross(cameraFront, cameraUp));	// the cross product of the front and up vectors will be the right vector (orthogonal to both the other vectors)
	glm::vec3 forward = glm::normalize(glm::cross(cameraRight, cameraUp));	// the cross product of the right and up vectors will be a vector facing in the forward direction (relative to camera)


	/* FOR FPS CAMERA
	 GLFW_KEY_W:
			cameraPos -= cameraSpeed * forward;
	 GLFW_KEY_S:
			cameraPos += cameraSpeed * forward;*/

	/*
		FOR FLYING CAMERA
		GLFW_KEY_W:
			cameraPos += cameraSpeed * cameraFront;
		GLFW_KEY_S:
			cameraPos -= cameraSpeed * cameraFront;
	*/


	if (glfwGetKey(window, GLFW_KEY_W) == GLFW_PRESS)
		cameraPos -= cameraSpeed * forward;
	if (glfwGetKey(window, GLFW_KEY_S) == GLFW_PRESS)
		cameraPos += cameraSpeed * forward;
	if (glfwGetKey(window, GLFW_KEY_A) == GLFW_PRESS)
		cameraPos -= cameraSpeed * cameraRight;
	if (glfwGetKey(window, GLFW_KEY_D) == GLFW_PRESS)
		cameraPos += cameraSpeed * cameraRight;
}

void mouse_callback(GLFWwindow* window, double xpos, double ypos)
{
	if (firstMouse) {
		lastX = xpos;
		lastY = ypos;
		firstMouse = false;
	}

	float xoffset = xpos - lastX;
	float yoffset = lastY - ypos;
	lastX = xpos;
	lastY = ypos;

	const float sensitivity = 0.1f;
	xoffset *= sensitivity;
	yoffset *= sensitivity;

	yaw += xoffset;
	pitch += yoffset;

	if (pitch > 89.0f)
		pitch = 89.0f;
	if (pitch < -89.0f)
		pitch = -89.0f;

	cameraFront.x = cos(glm::radians(yaw)) * cos(glm::radians(pitch));
	cameraFront.y = sin(glm::radians(pitch));
	cameraFront.z = sin(glm::radians(yaw)) * cos(glm::radians(pitch));
}
